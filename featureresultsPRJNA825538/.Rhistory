shiny::runApp('GitHub/GSHackathon')
shiny::runApp('GitHub/GSHackathon')
runApp('Genetics/AppTry2')
shiny::runApp('GitHub/GSHackathon')
runApp('GitHub/GSHackathon')
shiny::runApp('GitHub/GSHackathon')
install.packages("Gviz")
install.packages("Rtools")
browseVignettes("Gviz")
library(GenomicRanges)
data(cpgIslands)
library(Gviz)
data(cpgIslands)
class(cpgIslands)
chr <- as.character(unique(seqnames(cpgIslands)))
gen <- genome(cpgIslands)
atrack <- AnnotationTrack(cpgIslands, name = "CpG")
plotTracks(atrack)
gtrack <- GenomeAxisTrack()
plotTracks(list(gtrack, atrack))
itrack <- IdeogramTrack(genome = gen, chromosome = chr)
plotTracks(list(itrack, gtrack, atrack))
data(geneModels)
grtrack <- GeneRegionTrack(geneModels, genome = gen,
chromosome = chr, name = "Gene Model")
plotTracks(list(itrack, gtrack, atrack, grtrack))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
pkgs = c("DESeq2", "edgeR", "gplots", "tximport", "biomaRt")
BiocManager::install(pkgs)
library(BiocParallel)
paralle::detectCores()
parallel::detectCores()
library(Matrix)
package_version("R")
packageVersion("R")
setwd("//wsl.localhost/Ubuntu/home/djdennis/mouse/featureresults")
normalized_counts <- read.csv("normalized_counts.csv", row.names = 1)
normalized_counts <- normalized_counts[rownames(normalized_counts) %in% rownames(significant_genes), ]
top_genes <- order(apply(normalized_counts, 1, var), decreasing = TRUE)[1:50]
heatmap_data <- normalized_counts[top_genes, ]
desired_order <- c("control_1", "control_2", "control_3",
"knockdown_1", "knockdown_2", "knockdown_3")
heatmap_data <- heatmap_data[, desired_order]
library(pheatmap)
pheatmap(heatmap_data,
scale = "row",                      # Scale each gene (row) to z-scores
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red gradient
clustering_distance_rows = "correlation", # Cluster rows by correlation
clustering_distance_cols = "correlation", # Cluster columns by correlation
main = "Heatmap of Normalized Counts")
