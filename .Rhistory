shiny::runApp('GitHub/GSHackathon')
shiny::runApp('GitHub/GSHackathon')
runApp('Genetics/AppTry2')
shiny::runApp('GitHub/GSHackathon')
runApp('GitHub/GSHackathon')
shiny::runApp('GitHub/GSHackathon')
install.packages("Gviz")
install.packages("Rtools")
browseVignettes("Gviz")
library(GenomicRanges)
data(cpgIslands)
library(Gviz)
data(cpgIslands)
class(cpgIslands)
chr <- as.character(unique(seqnames(cpgIslands)))
gen <- genome(cpgIslands)
atrack <- AnnotationTrack(cpgIslands, name = "CpG")
plotTracks(atrack)
gtrack <- GenomeAxisTrack()
plotTracks(list(gtrack, atrack))
itrack <- IdeogramTrack(genome = gen, chromosome = chr)
plotTracks(list(itrack, gtrack, atrack))
data(geneModels)
grtrack <- GeneRegionTrack(geneModels, genome = gen,
chromosome = chr, name = "Gene Model")
plotTracks(list(itrack, gtrack, atrack, grtrack))
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
pkgs = c("DESeq2", "edgeR", "gplots", "tximport", "biomaRt")
BiocManager::install(pkgs)
library(BiocParallel)
paralle::detectCores()
parallel::detectCores()
library(Matrix)
package_version("R")
packageVersion("R")
setwd("//wsl.localhost/Ubuntu/home/djdennis/mouse")
library(pheatmap)
library(dplyr)
diff_expr <- read.csv("feature_method.csv", stringsAsFactors = FALSE)
heatmap_data <- as.matrix(diff_expr[, 2:ncol(diff_expr)])
rownames(heatmap_data) <- diff_expr[, 1]
desired_order <- c("control_1", "control_2", "control_3",
"knockdown_1", "knockdown_2", "knockdown_3")
heatmap_data <- heatmap_data[, desired_order]
heatmap_data <- heatmap_data[, desired_order]
colnames(heatmap_data)
library(Rsubread)
library(edgeR)
files <- c("control_1.bam","control_2.bam","control_3.bam","knockdown_1.bam","knockdown_2.bam","knockdown_3.bam")
fc <- featureCounts(files, annot.ext="/home/djdennis/mouse/refs/mouse_modified.gff", isGTFAnnotationFile=TRUE)
fc <- featureCounts(files, annot.ext="refs/mouse_modified.gff", isGTFAnnotationFile=TRUE)
fc <- featureCounts(files, annot.ext="mouse_modified.gff", isGTFAnnotationFile=TRUE)
files <- file.path("/home/djdennis/mouse/bam",
c("control_1.bam", "control_2.bam", "control_3.bam",
"knockdown_1.bam", "knockdown_2.bam", "knockdown_3.bam"))
fc <- featureCounts(files, annot.ext="mouse_modified.gff", isGTFAnnotationFile=TRUE)
fc
y <- featureCounts2DGEList(fc)
y
Genotype <- factor(c("control","control","control","knockdown","knockdown","knockdown"))
design <- model.matrix(~Genotype)
design
keep <- filterByExpr(y,design)
y2 <- y[keep,,keep.lib.size=FALSE]
y2 <- normLibSizes(y2)
fit <- glmQLFit(y2,design)
q <- glmQLFTest(fit)
topTags(q)
keep
q
normalized_counts <- cpm(y2, log = TRUE)
top_genes <- topTags(q, n = 80)$table
top_gene_names <- rownames(top_genes)
heatmap_data <- normalized_counts[top_gene_names, ]
desired_order <- c("control_1", "control_2", "control_3",
"knockdown_1", "knockdown_2", "knockdown_3")
colnames(heatmap_data) <- desired_order
heatmap_data <- heatmap_data[, desired_order]
pheatmap(heatmap_data,
scale = "row",                      # Scale each gene (row) to z-scores
color = colorRampPalette(c("blue", "white", "red"))(50), # Blue to red gradient
clustering_distance_rows = "correlation", # Cluster rows by correlation
clustering_distance_cols = "correlation", # Cluster columns by correlation
main = "Heatmap of Differentially Expressed Genes")
pdf("heatmap_differential_expression.pdf")
pheatmap(heatmap_data,
scale = "row",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
main = "Heatmap of Differentially Expressed Genes")
dev.off()
pdf("heatmap_differential_expression.pdf")
pheatmap(heatmap_data,
scale = "row",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "correlation",
clustering_distance_cols = "correlation",
main = "Heatmap of Differentially Expressed Genes")
dev.off()
write.csv(fc$counts, "feature_counts.csv", row.names = TRUE)
write.csv(fc$annotation, "feature_counts_annotations.csv", row.names = FALSE)
write.csv(normalized_counts, "normalized_counts.csv", row.names = TRUE)
top_results <- topTags(q, n = Inf)$table
write.csv(top_results, "differential_expression_results.csv", row.names = TRUE)
